[tool.poetry]
name = "om1_modules"
version = "0.1.0"
description = "ML modules for om1"
authors = ["openmind.org"]
readme = "README.md"
packages = [
    { include = "om1_speech", from = "src" },
    { include = "om1_utils", from = "src" },
    { include = "om1_vlm", from = "src" },
    { include = "om1_ml", from = "src"},
]

[tool.poetry.scripts]
om1_tts = "om1_speech.audio.audio_output_stream:main"

[tool.poetry.dependencies]
python = ">=3.9"
pyaudio = "^0.2.13"
numpy = "^2.0.2"
websockets = "^13.0"
opencv-python = "^4.5.0"
requests = "^2.32.3"
protobuf = "^5.29.3"
google = "^3.0.0"
ultralytics = "^8.3.134"
omegaconf = "^2.3.0"
flask = "^3.1.1"
coremltools = "^8.3.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
pytest-asyncio = "^0.19.0"
black = "^24.10.0"
isort = "^5.13.2"
ruff = "^0.9.2"
pre-commit = "^4.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = "(.venv)|(/src/om1_vlm/gz/msgs)"

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
skip_glob = [".venv*", "/src/om1_vlm/gz/msgs"]

[tool.ruff]
line-length = 88
indent-width = 4
exclude = ["src/om1_vlm/gz/msgs"]

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = ["E203", "E501"]

fixable = ["ALL"]
unfixable = []

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
